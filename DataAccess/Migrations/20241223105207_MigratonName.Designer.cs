// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CarsiteContext))]
    [Migration("20241223105207_MigratonName")]
    partial class MigratonName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Attribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("attribute_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("TypeValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type_value");

                    b.HasKey("AttributeId")
                        .HasName("PK__Attribut__9090C9BB8A57364F");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("body_type");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("engine_type");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fuel_type");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("make");

                    b.Property<int>("Mileage")
                        .HasColumnType("int")
                        .HasColumnName("mileage");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("model");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("SaleLocation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sale_location");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transmission");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("CarId")
                        .HasName("PK__Cars__4C9A0DB3BE02DE50");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Domain.Models.CarAttribute", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("value");

                    b.HasKey("CarId", "AttributeId")
                        .HasName("PK__CarAttri__E5930128B9663F86");

                    b.HasIndex("AttributeId");

                    b.ToTable("CarAttribute", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.HasKey("ImageId")
                        .HasName("PK__CarImage__DC9AC95519BCAF5F");

                    b.HasIndex("CarId");

                    b.ToTable("CarImages");
                });

            modelBuilder.Entity("Domain.Models.CarRental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rental_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price_per_day");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RentalId")
                        .HasName("PK__CarRenta__67DB611B7353CAD6");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("CarRentals");
                });

            modelBuilder.Entity("Domain.Models.CarSale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sale_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"));

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("buyer_id");

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("SaleDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sale_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("SaleId")
                        .HasName("PK__CarSales__E1EB00B2EBEC00BD");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CarId");

                    b.HasIndex("SellerId");

                    b.ToTable("CarSales");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__D54EE9B43B46C16A");

                    b.HasIndex(new[] { "Name" }, "UQ__Categori__72E12F1B64191FEB")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("post_type");

                    b.Property<DateTime?>("PublicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("publication_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__E7957687DAB9DA3D");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Models.ExpertRecommendation", b =>
                {
                    b.Property<int>("RecommendationId")
                        .HasColumnType("int")
                        .HasColumnName("recommendation_id");

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int")
                        .HasColumnName("expert_id");

                    b.HasKey("RecommendationId")
                        .HasName("PK__ExpertRe__BCB11F4F42E1DD85");

                    b.HasIndex("CarId");

                    b.HasIndex("ExpertId");

                    b.ToTable("ExpertRecommendations");
                });

            modelBuilder.Entity("Domain.Models.MaintenanceRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("service_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RecordId")
                        .HasName("PK__Maintena__BFCFB4DD25F22D52");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("Domain.Models.MaintenanceService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int")
                        .HasColumnName("center_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("ServiceId")
                        .HasName("PK__Maintena__3E0DB8AFE7B2C252");

                    b.HasIndex("CenterId");

                    b.ToTable("MaintenanceServices");
                });

            modelBuilder.Entity("Domain.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("int")
                        .HasColumnName("news_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.HasKey("NewsId")
                        .HasName("PK__News__4C27CCD8ADF27A17");

                    b.HasIndex("CategoryId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842FB1D383D0");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("post_type");

                    b.Property<DateTime?>("PublicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("publication_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("PostId")
                        .HasName("PK__Posts__3ED787661F40F73B");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CarId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Domain.Models.PostTag", b =>
                {
                    b.Property<int>("PostTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostTagId"));

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("PostTagId")
                        .HasName("PK__PostTags__FB97556E7117B25A");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("Domain.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rating_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("Rating1")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RatingId")
                        .HasName("PK__Ratings__D35B278BE756F034");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Domain.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__60883D901AE0347B");

                    b.HasIndex("CarId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Models.ServiceCenter", b =>
                {
                    b.Property<int>("CenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("center_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CenterId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("CenterId")
                        .HasName("PK__ServiceC__290A28879391C003");

                    b.HasIndex(new[] { "Email" }, "UQ__ServiceC__AB6E61648E4A03C8")
                        .IsUnique();

                    b.ToTable("ServiceCenters");
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("TagId")
                        .HasName("PK__Tags__4296A2B6EEC6A8F5");

                    b.HasIndex(new[] { "Name" }, "UQ__Tags__72E12F1B2370C669")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Domain.Models.TechnicalMaintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("maintenance_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceId"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("maintenance_date");

                    b.Property<int?>("ServiceCenterId")
                        .HasColumnType("int")
                        .HasColumnName("service_center_id");

                    b.HasKey("MaintenanceId")
                        .HasName("PK__Technica__9D754BEA6F137B63");

                    b.HasIndex("CarId");

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("TechnicalMaintenance", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TestDrife", b =>
                {
                    b.Property<int>("TestDriveId")
                        .HasColumnType("int")
                        .HasColumnName("test_drive_id");

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.HasKey("TestDriveId")
                        .HasName("PK__TestDriv__7AC61E305DBD24B6");

                    b.HasIndex("CarId");

                    b.ToTable("TestDrives");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registration_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F12055DB6");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E61642F096CF4")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ProfileId")
                        .HasName("PK__UserProf__AEBB701FD54D881A");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Domain.Models.CarAttribute", b =>
                {
                    b.HasOne("Domain.Models.Attribute", "Attribute")
                        .WithMany("CarAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CarAttrib__attri__0F624AF8");

                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("CarAttributes")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CarAttrib__car_i__0E6E26BF");

                    b.Navigation("Attribute");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.Models.CarImage", b =>
                {
                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("CarImages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__CarImages__car_i__75A278F5");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.Models.CarRental", b =>
                {
                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("CarRentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__CarRental__car_i__5DCAEF64");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("CarRentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__CarRental__user___5EBF139D");

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.CarSale", b =>
                {
                    b.HasOne("Domain.Models.User", "Buyer")
                        .WithMany("CarSaleBuyers")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__CarSales__buyer___6477ECF3");

                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("CarSales")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__CarSales__car_id__628FA481");

                    b.HasOne("Domain.Models.User", "Seller")
                        .WithMany("CarSaleSellers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__CarSales__seller__6383C8BA");

                    b.Navigation("Buyer");

                    b.Navigation("Car");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.HasOne("Domain.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__Comments__post_i__59FA5E80");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Comments__user_i__59063A47");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.ExpertRecommendation", b =>
                {
                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("ExpertRecommendations")
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK__ExpertRec__car_i__5535A963");

                    b.HasOne("Domain.Models.User", "Expert")
                        .WithMany("ExpertRecommendations")
                        .HasForeignKey("ExpertId")
                        .HasConstraintName("FK__ExpertRec__exper__5441852A");

                    b.HasOne("Domain.Models.Post", "Recommendation")
                        .WithOne("ExpertRecommendation")
                        .HasForeignKey("Domain.Models.ExpertRecommendation", "RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ExpertRec__recom__534D60F1");

                    b.Navigation("Car");

                    b.Navigation("Expert");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Domain.Models.MaintenanceRecord", b =>
                {
                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Maintenan__car_i__693CA210");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Maintenan__user___6A30C649");

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.MaintenanceService", b =>
                {
                    b.HasOne("Domain.Models.ServiceCenter", "Center")
                        .WithMany("MaintenanceServices")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Maintenan__cente__6FE99F9F");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("Domain.Models.News", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__News__category_i__48CFD27E");

                    b.HasOne("Domain.Models.Post", "NewsNavigation")
                        .WithOne("News")
                        .HasForeignKey("Domain.Models.News", "NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__News__news_id__47DBAE45");

                    b.Navigation("Category");

                    b.Navigation("NewsNavigation");
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Notificat__user___7F2BE32F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.HasOne("Domain.Models.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Posts__author_id__4222D4EF");

                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("Posts")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Posts__car_id__440B1D61");

                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Posts__category___44FF419A");

                    b.Navigation("Author");

                    b.Navigation("Car");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Models.PostTag", b =>
                {
                    b.HasOne("Domain.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__PostTags__post_i__7B5B524B");

                    b.HasOne("Domain.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__PostTags__tag_id__7C4F7684");

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Models.Rating", b =>
                {
                    b.HasOne("Domain.Models.Post", "Post")
                        .WithMany("Ratings")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__Ratings__post_id__04E4BC85");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Ratings__user_id__03F0984C");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Review", b =>
                {
                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("Reviews")
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK__Reviews__car_id__4CA06362");

                    b.HasOne("Domain.Models.Post", "ReviewNavigation")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Models.Review", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__review___4BAC3F29");

                    b.Navigation("Car");

                    b.Navigation("ReviewNavigation");
                });

            modelBuilder.Entity("Domain.Models.TechnicalMaintenance", b =>
                {
                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("TechnicalMaintenances")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Technical__car_i__08B54D69");

                    b.HasOne("Domain.Models.ServiceCenter", "ServiceCenter")
                        .WithMany("TechnicalMaintenances")
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Technical__servi__09A971A2");

                    b.Navigation("Car");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("Domain.Models.TestDrife", b =>
                {
                    b.HasOne("Domain.Models.Car", "Car")
                        .WithMany("TestDrives")
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK__TestDrive__car_i__5070F446");

                    b.HasOne("Domain.Models.Post", "TestDrive")
                        .WithOne("TestDrife")
                        .HasForeignKey("Domain.Models.TestDrife", "TestDriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__test___4F7CD00D");

                    b.Navigation("Car");

                    b.Navigation("TestDrive");
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__UserProfi__user___72C60C4A");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Attribute", b =>
                {
                    b.Navigation("CarAttributes");
                });

            modelBuilder.Entity("Domain.Models.Car", b =>
                {
                    b.Navigation("CarAttributes");

                    b.Navigation("CarImages");

                    b.Navigation("CarRentals");

                    b.Navigation("CarSales");

                    b.Navigation("ExpertRecommendations");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("Posts");

                    b.Navigation("Reviews");

                    b.Navigation("TechnicalMaintenances");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("News");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ExpertRecommendation");

                    b.Navigation("News");

                    b.Navigation("PostTags");

                    b.Navigation("Ratings");

                    b.Navigation("Review");

                    b.Navigation("TestDrife");
                });

            modelBuilder.Entity("Domain.Models.ServiceCenter", b =>
                {
                    b.Navigation("MaintenanceServices");

                    b.Navigation("TechnicalMaintenances");
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("CarRentals");

                    b.Navigation("CarSaleBuyers");

                    b.Navigation("CarSaleSellers");

                    b.Navigation("Comments");

                    b.Navigation("ExpertRecommendations");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("Ratings");

                    b.Navigation("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
